Last login: Thu Jan 10 13:05:56 on ttys002
mins-MacBook-Pro:~ mskim$ cd ocamlEx/
mins-MacBook-Pro:ocamlEx mskim$ ocaml
        OCaml version 4.07.0

# 1+2*3;;
- : int = 7
# true
  ;;
- : bool = true
# ();;
- : unit = ()
# usd "hello.ml";;
Error: Unbound value usd
# use "hello.ml";;    
Error: Unbound value use
# 1+ true
  ;;
Error: This expression has type bool but an expression was expected of type
         int
# use "hello.ml"
  ;;
Error: Unbound value use
#   if 2 > 1 then 0 else 1 ;;
- : int = 0
# let x = 1;;
val x : int = 1
# let y = 2;;
val y : int = 2
# if x =y then x else y
  ;;
- : int = 2
# fun x -> x+1;;
- : int -> int = <fun>
# fun x -> "X";;
- : 'a -> string = <fun>
#  fun x -> fun y -> x+y;;
- : int -> int -> int = <fun>
# fu fu  
  ;;
Error: Unbound value fu
# fun x- > fun y -> x+y 1 2;
  ;
  ;;
Error: Syntax error
# ㅣ let add x y = x+y in add 1 2;;
- : int = 3
# let add = x y -> x+y in add 1 2 ;;
Error: Syntax error
# let x = 1 in 
  let f y = x + y in 
  let x = 2 in 
  f x;;
- : int = 3
# let id x = x ;
  ;
  ;;
Error: Syntax error
# let id x = x;;
val id : 'a -> 'a = <fun>
# let first_if_true test x y = if text x then x else y;;
Error: Unbound value text
Hint: Did you mean test?
# let first_if_true text x y = if text x then x else y;;
val first_if_true : ('a -> bool) -> 'a -> 'a -> 'a = <fun>
# [1;2;3];;
- : int list = [1; 2; 3]
# [1;2] = [2;1];;
- : bool = false
# ㅣㅑList.tl [1;2;3];;
- : int list = [2; 3]
# List.hd
  ;;
- : 'a list -> 'a = <fun>
# List.hd;;
- : 'a list -> 'a = <fun>
# List.hd[1;2;3];;
- : int = 1
# List.tl[1;2;3;];;
- : int list = [2; 3]
# let a = [2;3];;
val a : int list = [2; 3]
# let b = a::2;;
Error: This expression has type int but an expression was expected of type
         int list list
# let b = a::[2];;
Error: This expression has type int but an expression was expected of type
         int list
# a;;
- : int list = [2; 3]
# let b  = 2:[2;3];;
Error: Syntax error
# let isnil l = match l with [] -> ture |_ ->false;;
Error: Unbound value ture
# let isnil 1  = match 1 with [] -> true |_ ->false;;
Error: This pattern matches values of type 'a list
       but a pattern was expected which matches values of type int
# let isnil l = mathc l with [] - > true |_ ->false;;
Error: Syntax error
# let isnil l =  
  match l with
  [] -> true
  |_ ->false;;
val isnil : 'a list -> bool = <fun>
# isnil [1];;
- : bool = false
# isnil [];;
- : bool = true
# (@);;
- : 'a list -> 'a list -> 'a list = <fun>
# ㅣ let rec append l1 l2 = 
  match l1 with
  | [] -> l2
  | hd::tl -> hd :: (append tl l2);;
val append : 'a list -> 'a list -> 'a list = <fun>
# append [1;2;3;] [4;5;6;];;
- : int list = [1; 2; 3; 4; 5; 6]
# let rec reverse l =
  match l with
  | hd::[] -> hd
  | hd::tl -> 
  ;;
Error: Syntax error
# let rec reverse l =
  match l with
  | [] -> []
  | hd::tl -> (reverse tl) @ hd;;
val reverse : 'a list list -> 'a list = <fun>
# reverse [1;2;3;];;
Error: This expression has type int but an expression was expected of type
         'a list
# reverse [1;2;3];;
Error: This expression has type int but an expression was expected of type
         'a list
# let rec reverse l =
  match l with 
  | [] -> []
  | hd::tl ->(reverse tl) @ [hd];;
val reverse : 'a list -> 'a list = <fun>
# reverse[1;2;3];;
- : int list = [3; 2; 1]
# let rec nth l n = 
  match l with
  | [] -> raise (Failure "list is too short")
  | hd::tl ->           
  	if n = 0 then hd
        else nth tl (n-1);;
val nth : 'a list -> int -> 'a = <fun>
# nth [1;2;3] 3
  ;;
Exception: Failure "list is too short".
# nth [1;2;3] 2
  ;;
- : int = 3
# let rec remove_first a l =
  match l with 
        | [] -> []
  	| hd::tl ->
  		if a = hd then tl
  		else a :: (remove_first tl);;
Error: This expression has type 'a list
       but an expression was expected of type 'a
       The type variable 'a occurs inside 'a list
# let rec remove_first a l =
  	match l with 
  	| [] -> []      
  	| hd::tl ->
  		if a = hd then tl
  		else hd:: (remove_first a tl);;
val remove_first : 'a -> 'a list -> 'a list = <fun>
# remove_first 2 [1;2;3;2];;
- : int list = [1; 3; 2]
# let rec insert a l = 
  	match l with
  	|[] ->[]
  	|hd::tl ->
  		if a > hd then ;;
Error: Syntax error
# let rec insert a l =
  	match l with
  	|[] ->[a]
  	| hd::tl ->
  		if a <hd then a::hd::tl
  		else hd::(insert a tl);;
val insert : 'a -> 'a list -> 'a list = <fun>
# insert 2 [1;2];;
- : int list = [1; 2; 2]
# let rec sort l = 
  	match l with
  	|[]->[a]
  	|hd::tl ->
  	        if ;;           
Error: Syntax error
# let rec sort l = 
        match l with
  	|[] -> []
  	|hd::tl -> insert hd(sort tl);;
val sort : 'a list -> 'a list = <fun>
# sort[1;3;2;];;
- : int list = [1; 2; 3]
# let rec r list n m = m =
  	match list with
  	|[]->[]
  ';;    
Error: Syntax error
# ㅣㄷ       
  
  ;;
# let rec range list n m  =
        if n > m then []
  	else n::(range(n+1) m);;
Error: This expression has type int -> int list
       but an expression was expected of type int list
# let rec range list n m =
  if n > m then []
  else n ::(range (n+1) m);;
Error: This expression has type int -> int list
       but an expression was expected of type int list
# let rec range list n m =
  if n< m then []
  else n::(range (n+1) m);;
Error: This expression has type int -> int list
       but an expression was expected of type int list
# let rec range n m =
  if n > m then []
  else n::(range (n+1) m );;
val range : int -> int -> int list = <fun>
# range 2 5;;
- : int list = [2; 3; 4; 5]
# let rec concat l[m] -> [];;
Error: Syntax error
# let rec concat l[m] = [];;
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(_::_::_|[])
val concat : 'a -> 'b list -> 'c list = <fun>
# let rec concat l1 l2 = 
        match l1 with
  ;;
Error: Syntax error
# let rec concat l = 
  	match l with
  	| []-> []
  	| hd::tl -> hd @(concat tl);;
val concat : 'a list list -> 'a list = <fun>
# concat [[1;2];[3;4;5]];;
- : int list = [1; 2; 3; 4; 5]
# let zipper l1 l2 = 
  	match l1 with 
  ;;              
Error: Syntax error
# let zipper l1 l2 =
  	match (l1,l2) with
  	|;;          
Error: Syntax error
# let rec zipper l1 l2 = 
  	match (l1,l2) with
  	|[], [] -> []
  	|[],_ -> l2
  	|_,[] -> l1
  	|hd1::tl1 , hd2::tl2 -> hd1::hd2::(zipper tl1 tl2);;
val zipper : 'a list -> 'a list -> 'a list = <fun>
# zipper [1;3;5] [2;4;6];;
- : int list = [1; 2; 3; 4; 5; 6]
# let rec unzip l =
  	match l with 
  	| [] ->[]
  	| () -> ();;
Error: This variant pattern is expected to have type 'a list
       The constructor () does not belong to type list
# let rec unzip : ('a *'b)list ->'a list * 'b list
  = fun l ->
  	match l with
  	|[] -> ([],[])
  	|(a,b)::tl ->
  		let (l1,l2) = unzip tl in 
  			(a::l1, b::l2);;
val unzip : ('a * 'b) list -> 'a list * 'b list = <fun>
# unzip[(1,"one");(2,"two")];;
- : int list * string list = ([1; 2], ["one"; "two"])
# let rec drop = 
  ;;
Error: Syntax error
# let rec drop l n =
  	match n with
  	| if n= 0 then l;;
Error: Syntax error
# let rec drop l n = 
  	if n = 0 then l 
  	else 
  		match l with 
  		|[] ->[]
  		|hd::tl ->drop tl (n-1);;
val drop : 'a list -> int -> 'a list = <fun>
# drop [1;2;3;] 2;;
- : int list = [3]
# 
